VHDL implementation of the BLAKE2 Cryptographic Hash and Message Authentication
Code as described by Markku-Juhani O. Saarinen and Jean-Philippe Aumasson in
https://doi.org/10.17487/RFC7693

authors Benedikt Tutzer and Dinka Milovancev
april 2018

This core was developed for the digital-integrated-circuits laboratory at
TU Wien as part of a hardware argon2 implementation.

The main design is contained in blake2.vhd. blake2b.vhd and blake2s.vhd contain
wrapers for blake2b and blake2s respectively and hide some generics of the
blake2 entity by setting them to the appropriate values for the chosen
algorithm.

This repo contains one testbench for each of the two algorithms. The testbenches
compare the output of the corresponding entity to hashes generated by the
reference c implementation presented in https://doi.org/10.17487/RFC7693.
To start the tests, run the runsim.sh script (this uses ghdl, so make sure you
have ghdl installed on your system or adapt the script accordingly).

HOW TO USE: Split the message to be hashed into chunks of BLOCK_SIZE bytes. Send
them to the entity sequentially by setting the message port and raising valid_in
for one clock-cycle. message_len needs to be set to the number of bytes that are
to be hashed in total, the length of the hash can be chosen by setting hash_len.
After sending one chunk, wait for compress_ready to be high before sending the
next chunk. When the last chunk is sent, the input last_chunk needs to be set to
high. After the last chunk is encoded, the output valid_out will be raised and
the hash will be available at its output port
